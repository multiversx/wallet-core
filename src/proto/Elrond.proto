// Copyright Â© 2017-2020 Trust Wallet.
//
// This file is part of Trust. The full Trust copyright notice, including
// terms governing use, modification, and redistribution, is contained in the
// file LICENSE at the root of the source code distribution tree.

syntax = "proto3";

package TW.Elrond.Proto;
option java_package = "wallet.core.jni.proto";

// Generic / general-purpose transaction. Using one of the more specific messages (below) is recommended.
// TODO: Ideally, we should rename this to "Transaction" or "GenericTransaction". The renaming is temporarily postponed (as of December 2021)
// in order to delay unnecessary breaking changes.
message TransactionMessage {
    uint64      nonce = 1;
    string      value = 2;
    string      receiver = 3;
    string      sender = 4;
    string      sender_username = 5;
    string      receiver_username = 6;
    uint64      gas_price = 7;
    uint64      gas_limit = 8;
    string      data = 9;
    string      chain_id = 10;
    uint32      version = 11;
    // Currently, the "options" field should be ignored (not set) by applications using TW Core.
    // In the future, TW Core will handle specific transaction options 
    // (such as the "SignedWithHash" flag, as seen in https://github.com/ElrondNetwork/elrond-go-core/blob/main/core/versioning/txVersionChecker.go)
    // when building and signing transactions.
    uint32      options = 12;
}

// EGLD transfer (move balance).
message EGLDTransfer {
    uint64      nonce = 1;
    string      sender = 2;
    string      sender_username = 3;
    string      receiver = 4;
    string      receiver_username = 5;
    string      amount = 6;
    uint64      gas_limit = 7;
    uint64      gas_price = 8;
    string      chain_id = 9;
}

// ESDT transfer (transfer regular ESDTs - fungible tokens).
message ESDTTransfer {
    uint64      nonce = 1;
    string      sender = 2;
    string      sender_username = 3;
    string      receiver = 4;
    string      receiver_username = 5;
    string      token_identifier = 6;
    string      amount = 7;
    uint64      gas_limit = 8;
    uint64      gas_price = 9;
    string      chain_id = 10;
}

// ESDTNFT transfer (transfer NFTs, SFTs and Meta ESDTs).
message ESDTNFTTransfer {
    uint64      nonce = 1;
    string      sender = 2;
    string      sender_username = 3;
    string      receiver = 4;
    string      receiver_username = 5;
    string      token_identifier = 6;
    string      token_collection = 7;
    uint64      token_nonce = 8;
    string      amount = 9;
    uint64      gas_limit = 10;
    uint64      gas_price = 11;
    string      chain_id = 12;
}

// Input data necessary to create a signed transaction.
message SigningInput {
    bytes private_key = 1;

    oneof message_oneof {
        TransactionMessage transaction = 2;
        EGLDTransfer egld_transfer = 3;
        ESDTTransfer esdt_transfer = 4;
        ESDTNFTTransfer esdtnft_transfer = 5;
    }
}

// Transaction signing output.
message SigningOutput {
    string encoded = 1;
    string signature = 2;
}
